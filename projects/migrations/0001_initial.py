# Generated by Django 4.2 on 2023-05-01 09:04

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Contributor',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de modification')),
                ('contributor_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('permission', models.CharField(choices=[('AUTHOR', 'Auteur'), ('ASSIGNED', 'Assigné')], max_length=8, verbose_name='Permission ')),
                ('role', models.CharField(max_length=128, validators=[django.core.validators.RegexValidator('^[^&¤@=%<>#~`/§%=\\^\\$\\\\\\|\\{\\}\\[\\]\\+\\*]*$', code='Saisie invalide', message='La saisie ne doit pas comporter de caractères spéciaux.')], verbose_name='Rôle ')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de modification')),
                ('project_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=128, validators=[django.core.validators.RegexValidator('^[^&¤@=%<>#~`/§%=\\^\\$\\\\\\|\\{\\}\\[\\]\\+\\*]*$', code='Saisie invalide', message='La saisie ne doit pas comporter de caractères spéciaux.')], verbose_name='Titre ')),
                ('description', models.TextField(max_length=2048, validators=[django.core.validators.RegexValidator('^[^&¤@=%<>#~`/§%=\\^\\$\\\\\\|\\{\\}\\[\\]\\+\\*]*$', code='Saisie invalide', message='La saisie ne doit pas comporter de caractères spéciaux.')])),
                ('type', models.CharField(choices=[('BACK-END', 'Back-end'), ('FRONT-END', 'Front-end'), ('IOS', 'iOS'), ('ANDROID', 'Android')], max_length=9, verbose_name='Type ')),
                ('contributors', models.ManyToManyField(related_name='project_contributors', through='projects.Contributor', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de modification')),
                ('issue_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=128, validators=[django.core.validators.RegexValidator('^[^&¤@=%<>#~`/§%=\\^\\$\\\\\\|\\{\\}\\[\\]\\+\\*]*$', code='Saisie invalide', message='La saisie ne doit pas comporter de caractères spéciaux.')], verbose_name='Titre ')),
                ('description', models.TextField(max_length=2048, validators=[django.core.validators.RegexValidator('^[^&¤@=%<>#~`/§%=\\^\\$\\\\\\|\\{\\}\\[\\]\\+\\*]*$', code='Saisie invalide', message='La saisie ne doit pas comporter de caractères spéciaux.')])),
                ('tag', models.CharField(choices=[('BUG', 'Bug'), ('IMPROVEMENT', 'Amélioration'), ('TASK', 'Tâche')], max_length=11, verbose_name='Balise ')),
                ('priority', models.CharField(choices=[('WEAK', 'Faible'), ('MEDIUM', 'Moyenne'), ('HIGH', 'Élevée')], max_length=6, verbose_name='Priorité ')),
                ('status', models.CharField(choices=[('TODO', 'À faire'), ('ONGOING', 'En cours'), ('ENDED', 'Terminé')], max_length=7, verbose_name='Statut ')),
                ('assigned_user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_user_id', to=settings.AUTH_USER_MODEL, verbose_name='utilisateur assigné')),
                ('author_user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author_user_id', to=settings.AUTH_USER_MODEL, verbose_name='utilisateur auteur')),
                ('project_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.project', verbose_name='projet')),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='contributor',
            name='project_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.project', verbose_name='projet'),
        ),
        migrations.AddField(
            model_name='contributor',
            name='user_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='utilisateur'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de modification')),
                ('comment_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.TextField(max_length=2048, validators=[django.core.validators.RegexValidator('^[^&¤@=%<>#~`/§%=\\^\\$\\\\\\|\\{\\}\\[\\]\\+\\*]*$', code='Saisie invalide', message='La saisie ne doit pas comporter de caractères spéciaux.')])),
                ('author_user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_author_user_id', to=settings.AUTH_USER_MODEL, verbose_name='auteur du commentaire')),
                ('issue_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_issue_id', to='projects.issue', verbose_name='problème')),
            ],
            options={
                'ordering': ('-created_at',),
                'abstract': False,
            },
        ),
        migrations.AlterUniqueTogether(
            name='contributor',
            unique_together={('user_id', 'project_id')},
        ),
    ]
